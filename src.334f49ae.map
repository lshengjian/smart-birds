{"version":3,"sources":["MyBirds\\config.js","MyBirds\\src\\sprites\\Sprite.js","MyBirds\\src\\core\\util.js","MyBirds\\src\\core\\Network.js","MyBirds\\src\\core\\Particle.js","MyBirds\\src\\sprites\\Bird.js","MyBirds\\src\\sprites\\Hole.js","MyBirds\\src\\core\\PSO.js","MyBirds\\src\\Game.js","MyBirds\\src\\index.js"],"names":["Sprite","ctx","imgs","_ctx","_imgs","json","i","randomClamped","Math","random","Interval","start","end","activation","a","ap","exp","Neuron","nbInputs","weightInitFunc","value","weights","push","log","Layer","index","id","neurons","nbNeurons","n","Network","input","hiddens","output","layers","previousNeurons","layer","populate","h","activationFunc","fn","data","length","neuron","w","save","indexWeights","k","inputs","prevLayer","j","sum","out","lastLayer","createRandom","Particle","position","velocity","options","bestPosition","Array","fitness","Infinity","bestFitness","_inertiaWeight","inertiaWeight","_social","social","_personal","personal","pos","slice","globalBest","forEach","component","inertia","socialInfluence","personalInfluence","domain","map","interval","defaultOptions","Config","BIRD","Bird","init","brain","target","sreenWidth","SCREEN","width","sreenHeight","height","y","x","compute","option","jump","translate","rotate","PI","drawImage","restore","gravity","shouldFlap","flap","holes","HOLE","Hole","sceenHeight","speed","getTopPipeY","getBottomPipeY","Optimizer","_particles","_objectiveFunction","_bestPositionEver","_bestFitnessEver","_options","_async","_waiting","rng","undefined","pressure","objectiveFunction","nParticles","dim","ds","except","ret","floor","particle","f","_completeStep","storePosition","getPosition","randomBest","_getRandomBest","updateVelocity","updatePosition","getBestPosition","reduce","partialSum","Game","game","FPS","nbBirds","maxScore","holeOffset","holeHeight","images","fps","parseInt","setFPS","e","ss","split","birds","score","canvas","document","querySelector","getContext","spawnInterval","alives","generation","backgroundSpeed","backgroundx","printFlag","getElementById","onclick","optimizer","setObjectiveFunction","b","bird","agent","getDataCopy","loadData","reset","self","update","holeY","round","pipetop","pipebottom","isOut","splice","alive","isDead","isOver","clearRect","ceil","background","display","fillStyle","font","fillText","step","timeouts","messageName","setZeroTimeout","postMessage","handleMessage","event","source","window","stopPropagation","shift","run","loadImages","sources","callback","nb","loaded","Image","src","onload","addEventListener","sprites"],"mappings":"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","file":"src.334f49ae.map","sourceRoot":"..\\..","sourcesContent":["export default {\r\n    SCREEN: {\r\n        height: 512,\r\n        width: 576\r\n    },\r\n    BIRD: {\r\n        width: 40,\r\n        height: 30,\r\n        x: 80,\r\n        y: 250,\r\n        alive: true,\r\n        gravity: 0.3,\r\n        velocity: 0,\r\n        jump: -6\r\n    },\r\n    HOLE: {\r\n        width: 50,\r\n        height: 100,\r\n        speed: 3,\r\n    }\r\n};","export default class Sprite {\r\n    constructor(ctx,imgs) {\r\n        this._ctx=ctx;\r\n        this._imgs=imgs;\r\n    }\r\n    init(json) {\r\n        for (let i in json) {\r\n            this[i] = json[i];\r\n        }\r\n    }\r\n};","export function randomClamped() {\r\n    return Math.random() * 2 - 1;\r\n}\r\nexport function Interval(start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n}\r\nexport function activation(a) {\r\n    let ap = (-a) / 1;\r\n    return (1 / (1 + Math.exp(ap)))\r\n}","import {randomClamped,activation} from './util';\r\n\r\nexport class Neuron { //extends Phaser.Scene \r\n    constructor(nbInputs,weightInitFunc=randomClamped) {\r\n        this.value = 0;\r\n        this.weights = [];\r\n        for (let i = 0; i < nbInputs; i++) {\r\n            this.weights.push(weightInitFunc());\r\n        }\r\n        if (nbInputs>0)\r\n           this.weights.push(weightInitFunc());//w.x+b\r\n    }\r\n\r\n    \r\n    debug() {\r\n       // console.log(this.value);\r\n        console.log(this.weights);\r\n    }\r\n\r\n};\r\n\r\nexport  class Layer{ \r\n    constructor(index) {\r\n\t\tthis.id = index || 0;\r\n\t\tthis.neurons = [];\r\n    }\r\n    \r\n    populate(nbNeurons, nbInputs) {\r\n\t\tthis.neurons = [];\r\n\t\tfor (let i = 0; i < nbNeurons; i++) {\r\n\t\t\tlet n = new Neuron(nbInputs);\r\n\t\t\tthis.neurons.push(n);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport  class Network {\r\n    constructor(input, hiddens, output) {\r\n        this.layers = [];\r\n        let index = 0;\r\n        let previousNeurons = 0;\r\n        let layer = new Layer(index);\r\n        layer.populate(input, previousNeurons); // Number of Inputs will be set to\r\n        // 0 since it is an input layer.\r\n        previousNeurons = input; // number of input is size of previous layer.\r\n        this.layers.push(layer);\r\n        index++;\r\n        for (let h of hiddens) {\r\n            // Repeat same process as first layer for each hidden layer.\r\n            layer = new Layer(index);\r\n            layer.populate(h, previousNeurons);\r\n            previousNeurons = h;\r\n            this.layers.push(layer);\r\n            index++;\r\n        }\r\n        layer = new Layer(index);\r\n        layer.populate(output, previousNeurons); // Number of input is equal to\r\n        // the size of the last hidden  layer.\r\n        this.layers.push(layer);\r\n        this.activationFunc=activation;\r\n    }\r\n    setActivation(fn){\r\n        this.activationFunc=fn;\r\n    }\r\n\r\n    getDataCopy() {\r\n        let data = {\r\n            neurons: [], // Number of Neurons per layer.\r\n            weights: [] // Weights of each Neuron's inputs.\r\n        };\r\n\r\n        for (let layer of this.layers) {\r\n            data.neurons.push(layer.neurons.length);\r\n            for (let neuron of layer.neurons) {\r\n                for (let w of neuron.weights) {\r\n                    // push all input weights of each Neuron of each Layer into a flat\r\n                    // array.\r\n                    data.weights.push(w);\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n\t/**\r\n\t * Apply network data (neurons and weights).\r\n\t *\r\n\t * @param {save} Copy of network data (neurons and weights).\r\n\t * @return void\r\n\t */\r\n    loadData(save) {\r\n        let previousNeurons = 0;\r\n        let index = 0;\r\n        let indexWeights = 0;\r\n        this.layers = [];\r\n        for (let i in save.neurons) {\r\n            // Create and populate layers.\r\n            let layer = new Layer(index);\r\n            layer.populate(save.neurons[i], previousNeurons);\r\n            for (let neuron of layer.neurons) {\r\n                for (let k in neuron.weights) {\r\n                    // Apply neurons weights to each Neuron.\r\n                    neuron.weights[k] = save.weights[indexWeights];\r\n\r\n                    indexWeights++; // Increment index of flat array.\r\n                }\r\n            }\r\n            previousNeurons = save.neurons[i];\r\n            index++;\r\n            this.layers.push(layer);\r\n        }\r\n    }\r\n    compute(inputs) {\r\n        // Set the value of each Neuron in the input layer.\r\n        for (let i in inputs) {\r\n            if (this.layers[0] && this.layers[0].neurons[i]) {\r\n                this.layers[0].neurons[i].value = inputs[i];\r\n            }\r\n        }\r\n\r\n        let prevLayer = this.layers[0]; // Previous layer is input layer.\r\n        for (let i = 1; i < this.layers.length; i++) {\r\n            for (let j in this.layers[i].neurons) {\r\n                // For each Neuron in each layer.\r\n                let sum = 0;\r\n                for (let k in prevLayer.neurons) {\r\n                    // Every Neuron in the previous layer is an input to each Neuron in\r\n                    // the next layer.\r\n                    sum += prevLayer.neurons[k].value *\r\n                        this.layers[i].neurons[j].weights[k];\r\n                }\r\n                sum += 1 * this.layers[i].neurons[j].weights[prevLayer.neurons.length];\r\n\r\n                // Compute the activation of the Neuron.\r\n                this.layers[i].neurons[j].value = this.activationFunc(sum);\r\n            }\r\n            prevLayer = this.layers[i];\r\n        }\r\n\r\n        // All outputs of the Network.\r\n        let out = [];\r\n        let lastLayer = this.layers[this.layers.length - 1];\r\n        for (let i in lastLayer.neurons) {\r\n            out.push(lastLayer.neurons[i].value);\r\n        }\r\n        return out;\r\n    }\r\n\r\n};","import { Interval } from './util';\r\nexport class Particle {\r\n    constructor(position, velocity, options) { //agent is game sprite with network\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n        this.bestPosition = new Array(this.position.length);\r\n        this.fitness = -Infinity;\r\n        this.bestFitness = -Infinity;\r\n        this._inertiaWeight = options.inertiaWeight;\r\n        this._social = options.social;\r\n        this._personal = options.personal;\r\n    }\r\n    setPosition(pos) {\r\n        this.position = pos.slice(0);\r\n    }\r\n    storePosition() {\r\n        this.bestPosition = this.position.slice(0);\r\n    }\r\n\r\n    // Retrieves the particle's current position.\r\n    getPosition() {\r\n        return this.position.slice(0);\r\n    }\r\n\r\n\r\n    // Retrieves the particle's best saved position.\r\n\r\n    getBestPosition() {\r\n        return this.bestPosition.slice(0);\r\n    }\r\n    updateVelocity(globalBest, random) {\r\n        this.position.forEach((component, index) => {\r\n            let inertia = this.velocity[index] * this._inertiaWeight;\r\n            let socialInfluence = (globalBest.position[index] - component) * random() * this._social;\r\n            let personalInfluence = (this.bestPosition[index] - component) * random() * this._personal;\r\n            this.velocity[index] = inertia + socialInfluence + personalInfluence;\r\n        }, this);\r\n\r\n    }\r\n    // Applies the velocity\r\n    updatePosition() {\r\n        this.velocity.forEach(function (component, index) {\r\n            this.position[index] += component;\r\n        }, this);\r\n    }\r\n\r\n};\r\nexport function createRandom(domain, options, random) {\r\n      let position = domain.map(function (interval) {\r\n          return random() * (interval.end - interval.start) + interval.start;\r\n      });\r\n  /*  let position = [\r\n         14.475488229746677, 58.63160272654033, 51.366758160085155,\r\n      -70.67286658878754, -11.526036051599444, -4.892985760561999,\r\n       -11.796180543121386, 25.031926173014348, 5.54942246510434*/\r\n    let velocity = domain.map(function (interval) {\r\n        return (random() * (interval.end - interval.start)) * 0.05;\r\n    });\r\n    return new Particle(position, velocity, options);\r\n};","import Config from '../../config';\r\nimport Sprite from './Sprite';\r\nimport { Network } from '../core/Network';\r\nimport { Particle } from '../core/Particle';\r\nlet defaultOptions = Config.BIRD;\r\nexport default class Bird extends Sprite {\r\n    constructor(ctx, imgs) {\r\n        super(ctx, imgs);\r\n        this.init(defaultOptions);\r\n        this.brain = new Network(2, [2], 1);\r\n    }\r\n    shouldFlap(target) {\r\n        let sreenWidth = Config.SCREEN.width;\r\n        let sreenHeight = Config.SCREEN.height;\r\n     \r\n        let inputs = [\r\n            (target.y + target.height / 2 - this.y - this.height / 2) / sreenHeight,\r\n            (target.x + target.width / 2 - this.x - this.width / 2) / sreenWidth\r\n        ];\r\n        return this.brain.compute(inputs) >= 0.5;\r\n    }\r\n    reset(option = defaultOptions) {\r\n        this.init(option);\r\n    }\r\n    flap() {\r\n        this.velocity = this.jump;\r\n    }\r\n    display() {\r\n        let ctx = this._ctx;\r\n        ctx.save();\r\n        ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\r\n        ctx.rotate(Math.PI / 2 * this.velocity / 20);\r\n        ctx.drawImage(this._imgs[0], -this.width / 2, -this.height / 2, this.width, this.height);\r\n        ctx.restore();\r\n        //console.log('draw bird');\r\n    }\r\n    update(target) {\r\n        this.velocity += this.gravity;\r\n        this.y += this.velocity;\r\n        if (target == null) {\r\n            return false;\r\n        }\r\n        if (this.shouldFlap(target)) {\r\n            this.flap();\r\n        }\r\n    }\r\n    isDead(holes) {\r\n        let sreenHeight = Config.SCREEN.height;\r\n\r\n        if (this.y >= sreenHeight || this.y + this.height <= 0) {\r\n            return true;\r\n        }\r\n        for (let h of holes){\r\n            if ( this.x>h.x\r\n                &&this.x<(h.x+h.width)\r\n                &&(this.y<h.y||(this.y+this.height)>(h.y+h.height))\r\n            )\r\n                return true;\r\n        }\r\n \r\n        return false;\r\n    }\r\n};","import Config from '../../config';\r\nimport Sprite from './Sprite';\r\nlet defaultOptions = Config.HOLE;\r\nexport default class Hole extends Sprite {\r\n    constructor(ctx, imgs) {\r\n        super(ctx, imgs);\r\n        this.init(defaultOptions);\r\n    }\r\n    reset(option = defaultOptions) {\r\n        this.init(option);\r\n    }\r\n    getTopPipeHeight(sceenHeight) {\r\n        return this.x\r\n    }\r\n    getCenter() {\r\n        return {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2\r\n        };\r\n    }\r\n    getTopPipeY() {\r\n        return this.y - this._imgs[0].height;\r\n    }\r\n    getBottomPipeY() {\r\n        return this.y + this.height;\r\n    }\r\n    getBottomPipeHeight(sceenHeight) {\r\n        return sceenHeight - this.y - this.height;\r\n    }\r\n    update() {\r\n        this.x -= this.speed;\r\n    }\r\n    display() {\r\n        let ctx = this._ctx;\r\n        ctx.drawImage(this._imgs[0], this.x, this.getTopPipeY(),\r\n            this.width, this._imgs[0].height);\r\n        ctx.drawImage(this._imgs[1], this.x, this.getBottomPipeY(),\r\n            this.width, this._imgs[1].height);\r\n\r\n    }\r\n    isOut() {\r\n        if (this.x + this.width < 0) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n};","import { Particle, createRandom } from './Particle';\r\n\r\nexport default class Optimizer {\r\n    constructor() {\r\n        this._particles = null;\r\n        this._objectiveFunction = null;\r\n        this._bestPositionEver = null;\r\n        this._bestFitnessEver = -Infinity;\r\n        this._options = {\r\n            inertiaWeight: 0.73,\r\n            social: 2,\r\n            personal: 2,\r\n            pressure: 0.98\r\n        };\r\n        this._async = false;\r\n        this._waiting = false;\r\n        this.rng = {\r\n            random: Math.random,\r\n            setSeed: function () { }\r\n        };\r\n    }\r\n    setOptions(options) {\r\n        // + *inertiaWeight* - is multiplied every frame with the previous velocity;\r\n        if (options.inertiaWeight !== undefined) {\r\n            this._options.inertiaWeight = options.inertiaWeight;\r\n        }\r\n        // + *social* dictates the influence of the best performing particle when updating particle velocities\r\n        if (options.social !== undefined) {\r\n            this._options.social = options.social;\r\n        }\r\n\r\n        // + *personal* dictates the influence of a particle's best encountered position\r\n        if (options.personal !== undefined) {\r\n            this._options.personal = options.personal;\r\n        }\r\n        // + *pressure* - bias in selecting the best performing particle in the swarm.\r\n        // Takes values between 0 and 1; 0 meaning that the best is chosen randomly and 1 that\r\n        // the actual best is computed at every iteration\r\n        if (options.pressure !== undefined) {\r\n            this._options.pressure = options.pressure;\r\n        }\r\n\r\n    }\r\n    setObjectiveFunction(objectiveFunction) {\r\n        this._objectiveFunction = objectiveFunction;\r\n    }\r\n    init(nParticles, dim, interval) {\r\n        this.dim = dim;\r\n        let ds = [];\r\n        for (let i = 0; i < dim; i++) {\r\n            ds.push(interval);\r\n        }\r\n\r\n        this._bestPositionEver = null;\r\n        this._bestFitnessEver = -Infinity;\r\n        this._particles = [];\r\n        for (var i = 0; i < nParticles; i++) {\r\n            this._particles.push(createRandom(ds, this._options, this.rng.random));\r\n        }\r\n    }\r\n    _getRandomBest(except) {\r\n        let ret = Math.floor(this.rng.random() * this._particles.length);\r\n        this._particles.forEach(function (particle, index) {\r\n            if (\r\n                this.rng.random() < this._options.pressure &&\r\n                this._particles[index].fitness > this._particles[ret].fitness &&\r\n                index !== except\r\n            ) {\r\n                ret = index;\r\n            }\r\n        }, this);\r\n        return ret;\r\n    }\r\n    step() {\r\n\r\n        this._particles.forEach(function (particle) {\r\n            let f = this._objectiveFunction(particle.position);\r\n            if (f != -Infinity)\r\n                particle.fitness = f;\r\n        }, this);\r\n        this._completeStep();\r\n\r\n    }\r\n\r\n    _completeStep() {\r\n        // Record the best found solutions\r\n        this._particles.forEach(function (particle) {\r\n            if (particle.fitness > particle.bestFitness) {\r\n                particle.bestFitness = particle.fitness;\r\n                particle.storePosition();\r\n                if (particle.fitness > this._bestFitnessEver) {\r\n                    this._bestFitnessEver = particle.fitness;\r\n                    this._bestPositionEver = particle.getPosition();\r\n                }\r\n            }\r\n        }, this);\r\n\r\n        // Update velocities\r\n        this._particles.forEach(function (particle, index) {\r\n            let randomBest = this._particles[this._getRandomBest(index)];\r\n            particle.updateVelocity(randomBest, this.rng.random);\r\n        }, this);\r\n\r\n        // Update positions\r\n        this._particles.forEach(function (particle) {\r\n            particle.updatePosition();\r\n        });\r\n\r\n    }\r\n    getParticles() {\r\n        return this._particles.map(function (particle) {\r\n            return {\r\n                position: particle.getPosition(),\r\n                fitness: particle.fitness,\r\n                bestPosition: particle.getBestPosition(),\r\n                bestFitness: particle.bestFitness\r\n            };\r\n        });\r\n    }\r\n\r\n    // Retrieves the best solution ever recorded\r\n    getBestPosition() {\r\n        return this._bestPositionEver;\r\n    }\r\n\r\n    // Retrieves the best fitness ever recorded\r\n    getBestFitness() {\r\n        return this._bestFitnessEver;\r\n    }\r\n\r\n    // Retrieves the mean fitness of the entire swarm\r\n    getMeanFitness() {\r\n        let sum = this._particles.reduce(function (partialSum, particle) {\r\n            return partialSum + particle.fitness;\r\n        }, 0);\r\n        return sum / this._particles.length;\r\n    }\r\n\r\n};\r\n\r\n\r\n","import Config from '../config';\r\nimport Bird from './sprites/Bird';\r\nimport Hole from './sprites/Hole';\r\nimport Optimizer from './core/PSO';\r\n\r\nlet game;\r\nlet FPS = 60;\r\nlet nbBirds = 30;\r\nlet maxScore = 0;\r\nlet holeOffset = 50;\r\nlet holeHeight = 120;\r\nlet images = {};\r\n\r\nlet speed = function (fps) {\r\n    FPS = parseInt(fps);\r\n}\r\nlet setFPS = function (e) {\r\n    let ss = e.target.id;\r\n    FPS = parseInt(ss.split('s')[1]);\r\n}\r\n\r\nexport default class Game {\r\n    constructor(imgs) {\r\n        images = imgs;\r\n        this.holes = [];\r\n        this.birds = [];\r\n        this.score = 0;\r\n        this.canvas = document.querySelector(\"#flappy\");//width='576' height='512'\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.width = this.canvas.width = Config.SCREEN.width;\r\n        this.height = this.canvas.height = Config.SCREEN.height;\r\n        this.spawnInterval = 90;\r\n        this.interval = 0;\r\n        this.alives = 0;\r\n        this.generation = 1;\r\n        this.backgroundSpeed = 0.5;\r\n        this.backgroundx = 0;\r\n        this.maxScore = 0;\r\n        this.printFlag = true;\r\n        document.getElementById(\"s0\").onclick = setFPS;\r\n        document.getElementById(\"s60\").onclick = setFPS;\r\n        document.getElementById(\"s120\").onclick = setFPS;\r\n        document.getElementById(\"s180\").onclick = setFPS;\r\n        document.getElementById(\"s300\").onclick = setFPS;\r\n\r\n        this.birds = [];\r\n\r\n\r\n        this.optimizer = new Optimizer();\r\n        this.optimizer.setObjectiveFunction((x) => -Infinity);\r\n        let domain = { start: -10, end: 10 };\r\n        this.optimizer.init(nbBirds, 9, domain);//(2+1)*2+(2+1)*1\r\n        //this.optimizer.init(nbBirds, 11, domain);//(3+1)*2+(2+1)*1\r\n        for (let i = 0; i < nbBirds; i++) {\r\n            let b = new Bird(this.ctx, [images.bird]);\r\n            b.agent = this.optimizer._particles[i];\r\n            let data = b.brain.getDataCopy();\r\n            data.weights = b.agent.getPosition();\r\n            b.brain.loadData(data);\r\n            this.birds.push(b)\r\n        }\r\n        //this.alives = this.birds.length;\r\n    }\r\n    start() {\r\n        // console.log('Restart!')\r\n        this.generation++;\r\n        this.target = null;\r\n        this.alives = this.birds.length;\r\n        this.interval = 0;\r\n        this.score = 0;\r\n        this.holes = [];\r\n        for (let b of this.birds) {\r\n            b.reset({\r\n                x: 80,\r\n                y: 200 + 50 * Math.random(),\r\n                alive: true,\r\n                velocity: 0\r\n            });\r\n        }\r\n\r\n    }\r\n    update() {\r\n        let self = this;\r\n        if (FPS == 0) {\r\n            setZeroTimeout(function () {\r\n                self.update();\r\n            });\r\n        } else {\r\n            setTimeout(function () {\r\n                self.update();\r\n            }, 1000 / FPS);\r\n        }\r\n\r\n        if (this.interval == 0) {\r\n            let holeY = Math.round(Math.random() * (this.height - holeOffset * 2 - holeHeight)) + holeOffset;\r\n            let h = new Hole(this.ctx, [images.pipetop, images.pipebottom]);\r\n            h.reset({ x: this.width, y: holeY });\r\n            this.holes.push(h);\r\n            for (let h of this.holes) {\r\n                if ((h.x + h.width / 2) > (this.birds[0].x + this.birds[0].width / 2)) {\r\n                    this.target = h;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.interval++;\r\n        if (this.interval == this.spawnInterval) {\r\n            this.interval = 0;\r\n        }\r\n\r\n        this.backgroundx += this.backgroundSpeed;\r\n        for (let i = 0; i < this.holes.length; i++) {\r\n            this.holes[i].update();\r\n            if (this.holes[i].isOut()) {\r\n                this.holes.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        for (let b of this.birds) {\r\n            if (b.alive) {\r\n                b.update(this.target);\r\n                if (b.isDead(this.holes)) {\r\n                    b.alive = false;\r\n                    b.agent.fitness = this.score;\r\n                    this.alives--;\r\n                    if (this.isOver()) {\r\n                        this.start();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.score++;\r\n        this.maxScore = (this.score > this.maxScore) ? this.score : this.maxScore;\r\n                \r\n        if (this.printFlag && this.score > 200000) {\r\n            for (let b of this.birds) {\r\n                if (b.alive) {\r\n                    let data = b.agent.getPosition();\r\n                    console.log(data);\r\n                    this.printFlag = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    display() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        for (let i = 0; i < Math.ceil(this.width / images.background.width) + 1; i++) {\r\n            this.ctx.drawImage(images.background, i * images.background.width - Math.floor(this.backgroundx % images.background.width), 0)\r\n        }\r\n\r\n        for (let h of this.holes) {\r\n            h.display();\r\n        }\r\n        for (let b of this.birds) {\r\n            if (b.alive)\r\n                b.display();\r\n        }\r\n        this.ctx.fillStyle = \"white\";\r\n        this.ctx.font = \"20px sans-serif\";\r\n        this.ctx.fillText(\"Score : \" + this.score, 10, 25);\r\n        this.ctx.fillText(\"Max Score : \" + this.maxScore, 10, 50);\r\n        this.ctx.fillText(\"Generation : \" + this.generation, 10, 75);\r\n        this.ctx.fillText(\"Alive : \" + this.alives, 10, 100);\r\n\r\n        let self = this;\r\n        requestAnimationFrame(function () {\r\n            self.display();\r\n        });\r\n    }\r\n    isOver() {\r\n        for (let b of this.birds) {\r\n            if (b.alive) {\r\n                return false;\r\n            }\r\n        }\r\n        this.optimizer.step();\r\n        for (let i = 0; i < nbBirds; i++) {\r\n            let b = this.birds[i];\r\n            let data = b.brain.getDataCopy();\r\n            data.weights = b.agent.getPosition();\r\n            // console.log(data);\r\n            b.brain.loadData(data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n} ","import bird from \"../img/bird.png\";\r\nimport pipetop from \"../img/pipetop.png\";\r\nimport pipebottom from \"../img/pipebottom.png\";\r\nimport background from \"../img/background.png\";\r\n\r\n/*\r\nbest weights:\r\n [\r\n     20.472346642378405, 5.839225200887583, -20.820639350622535,//node1\r\n     -70.38086431444182, -8.947955242234235, -5.047430633043681, //node2\r\n     -19.456205837813776, 42.25079106668653, -9.684767174551585//node3\r\n];\r\n\r\n*/\r\n\r\n\r\n\r\nimport Game from './Game';\r\nlet timeouts = [];\r\nlet messageName = \"zero-timeout-message\";\r\n\r\nfunction setZeroTimeout(fn) {\r\n    timeouts.push(fn);\r\n    window.postMessage(messageName, \"*\");\r\n}\r\n\r\nfunction handleMessage(event) {\r\n    if (event.source == window && event.data == messageName) {\r\n        event.stopPropagation();\r\n        if (timeouts.length > 0) {\r\n            let fn = timeouts.shift();\r\n            fn();\r\n        }\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"message\", handleMessage, true);\r\nwindow.setZeroTimeout = setZeroTimeout;\r\nfunction run(imgs) {\r\n    let game = new Game(imgs);\r\n    game.start();\r\n    game.update();\r\n    game.display();\r\n}\r\n\r\nfunction loadImages(sources, callback) {\r\n    let nb = 0;\r\n    let loaded = 0;\r\n    let imgs = {};\r\n    for (let i in sources) {\r\n        nb++;\r\n        imgs[i] = new Image();\r\n        imgs[i].src = sources[i];\r\n        imgs[i].onload = function () {\r\n            loaded++;\r\n            if (loaded == nb) {\r\n                console.log(nb + ' images are loaded!')\r\n                callback(imgs);\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow.onload = () => {\r\n    let sprites = {\r\n        background,\r\n        bird,\r\n        pipetop,\r\n        pipebottom\r\n    };\r\n    //console.log(sprites);\r\n    loadImages(sprites, (imgs) => {\r\n        run(imgs);\r\n    });\r\n\r\n}\r\n"]}